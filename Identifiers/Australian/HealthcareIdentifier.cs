using System;
using System.ComponentModel;
using System.Text;
using System.Text.RegularExpressions;

namespace Identifiers.Australian
{
  /// <summary>
  /// Australian Healthcare Identifier Types (IHI, HPI-I, HPI-O)
  /// </summary>
  public enum HealthcareIdentifierType
  {
    /// <summary>
    /// Individual Healthcare Identifier (IHI)
    /// </summary>
    Individual,
    /// <summary>
    /// Healthcare Provider Identifier-Individual (HPI-I)
    /// </summary>
    Provider,
    /// <summary>
    /// Healthcare Provider Identifier-Orginisation (HPI-O)
    /// </summary>
    Orginisation,
    /// <summary>
    /// Not a known Identifier type
    /// </summary>
    None,

  }
  /// <summary>
  /// Australian Healthcare Identifiers (IHI, HPI-I, HPI-O)
  /// </summary>
  public class HealthcareIdentifier
  {
    #region Private properties

    private string RawValue = string.Empty;
    private string _ValidatationErrorMessage = string.Empty;
    private readonly string _ValidIndustryCode = "80";
    private readonly string _ValidCountryCode = "036";
    
    #endregion

    #region Public properties

    /// <summary>
    /// 2 char fixed mandatory numeric
    /// ISO 7812 mandates the value for Healthcare is “80”. 
    /// The first character, the MII, of “8” also includes telecommunications 
    /// and other future industry assignments
    /// </summary>
    public string IndustryCode { get; }

    /// <summary>
    /// 3 char fixed mandatory numeric
    /// ISO 3166-1 (Codes for the representation of names of countries and their 
    /// subdivisions — Part 1: Country codes). Australia is “036”.
    /// </summary>
    public string CountryCode { get; }

    /// <summary>
    /// 1 char fixed mandatory numeric
    /// The Department of Human Services has registered as “0”, “1” , “2” 
    /// Where:
    /// “0” represents IHI
    /// “1” represents HPI-I 
    /// “2” represents HPI-O
    /// </summary>
    public string NumberIssuerCode { get;}

    /// <summary>
    /// 9 char fixed mandatory numeric
    /// The unique reference number will be a unique 9 digit number that will be randomly 
    /// generated by the HI Service.It will need to cater for the Australian 
    /// population(20 million plus) and allow for growth over the life of the HI service.
    /// </summary>
    public string UniqueReference { get;}

    /// <summary>
    /// 1 char fixed mandatory numeric
    /// ISO 7812-1 mandates the use of the Luhn Algorithm to add a check digit to all identification numbers.
    /// </summary>
    public string CheckDigit { get; }

    /// <summary>
    /// Returns the entire Healthcare Identifier value
    /// </summary>
    public string Value
    {
      get
      {
        return IndustryCode + CountryCode + NumberIssuerCode + UniqueReference + CheckDigit;
      }
    }

    /// <summary>
    /// Returns the type of Healthcare Identifier 
    /// Where:
    /// Individual = IHI, 
    /// Provider = HPI-I, 
    /// Orginisation = HPI-O
    /// </summary>
    public HealthcareIdentifierType HealthcareIdentifierType
    {
      get
      {
        if (NumberIssuerCode == "0")
        {
          return HealthcareIdentifierType.Individual;
        }
        else if (NumberIssuerCode == "1")
        {
          return HealthcareIdentifierType.Provider;
        }
        else if (NumberIssuerCode == "2")
        {
          return HealthcareIdentifierType.Orginisation;
        }
        else
        {
          return HealthcareIdentifierType.None;
        }
      }
    }
    #endregion
    
    #region Public Constructors

    public HealthcareIdentifier()
    {
    }

    /// <summary>
    /// Surply a Healthcare Identifier as a string
    /// </summary>
    /// <param name="HealthcareIdentifierValue"></param>
    public HealthcareIdentifier(string HealthcareIdentifierValue)
    {      
      RawValue = HealthcareIdentifierValue;
      if (HealthcareIdentifierValue.Length > 1)      
        this.IndustryCode = HealthcareIdentifierValue.Substring(0, 2);
      if (HealthcareIdentifierValue.Length > 4)
        this.CountryCode = HealthcareIdentifierValue.Substring(2, 3);
      if (HealthcareIdentifierValue.Length > 5)
        this.NumberIssuerCode = HealthcareIdentifierValue.Substring(5, 1);
      if (HealthcareIdentifierValue.Length > 14)
        this.UniqueReference = HealthcareIdentifierValue.Substring(6, 9);
      if (HealthcareIdentifierValue.Length > 15)
        this.CheckDigit = HealthcareIdentifierValue.Substring(15, 1);                      
    }

    #endregion

    #region Public Methods

    /// <summary>
    /// Validates that the check digit is correct for the Healthcare Identifier Value
    /// </summary>
    /// <returns></returns>
    public bool IsValidCheckDigit()
    {
      if (this.CheckDigit == CheckDigitAlgorithm.Luhn.CheckDigitIs(this.Value.Substring(0, this.Value.Length - 1)))
        return true;
      else
        return false;
    }

    /// <summary>
    /// Validates the identifer is valid, asumes the Healthcare Identifier Type is correct.
    /// Type: None will always return false.
    /// </summary>
    /// <returns></returns>
    public bool IsValid()
    {
      return this.IsValid(this.HealthcareIdentifierType, this.Value);
    }

    public bool IsValid(HealthcareIdentifierType type)
    {
      return IsValid(type, this.Value);
    }

    /// <summary>
    /// Checks that the value given is a valid Healthcare Identifier of the type given.     
    /// </summary>
    /// <param name="value"></param>
    /// <param name="type"></param>
    /// <returns></returns>
    public static bool IsValid(string value, HealthcareIdentifierType type)
    {
      var oId = new HealthcareIdentifier(value);
      return oId.IsValid();
    }

    /// <summary>
    /// Error message explianing why the validation failed 
    /// </summary>
    /// <returns></returns>
    public string ValidatationErrorMessage()
    {
      this.IsValid();
      return _ValidatationErrorMessage;
    }

    /// <summary>
    /// Generate a random Healthcare Identifier for the type given
    /// </summary>
    /// <param name="type"></param>
    /// <returns></returns>
    public string GenerateRandomHealthcareIdentifier(HealthcareIdentifierType type)
    {
      Random Random = new Random();
      int RandomUniqueReference = Random.Next(0, 9);
      string UniqueReferenceNumber = RandomUniqueReference.ToString().PadLeft(9, '0');
      string CheckDigit = CheckDigitAlgorithm.Luhn.CheckDigitIs(_ValidIndustryCode + _ValidCountryCode + GetNumberIssuerCodeForHealthcareIdentifierType(type) + UniqueReferenceNumber);
      var oID = new HealthcareIdentifier(_ValidIndustryCode + _ValidCountryCode + GetNumberIssuerCodeForHealthcareIdentifierType(type) + UniqueReferenceNumber + CheckDigit);     
      return oID.Value;
    }

    #endregion

    #region Private Methods

    /// <summary>
    /// Convertes the HealthcareIdentifierType enum to the apropirate interger required for the Identifier value
    /// </summary>
    /// <param name="Type"></param>
    /// <returns></returns>
    private string GetNumberIssuerCodeForHealthcareIdentifierType(HealthcareIdentifierType Type)
    {
      switch (Type)
      {
        case HealthcareIdentifierType.Individual:
          return "0";
        case HealthcareIdentifierType.Provider:
          return "1";          
        case HealthcareIdentifierType.Orginisation:
          return "2";
        case HealthcareIdentifierType.None:
          return string.Empty;
        default:
          throw new InvalidEnumArgumentException(Type.ToString(), (int)Type, typeof(HealthcareIdentifierType));
      }
    }

    /// <summary>
    /// Validates the identifer is valid for the given type.
    /// Type: None will always return false.
    /// </summary>
    /// <returns></returns>
    private bool IsValid(HealthcareIdentifierType type, string Idneitfier)
    {
      if (String.IsNullOrWhiteSpace(IndustryCode))
      {
        _ValidatationErrorMessage = String.Format("The charaters 1-2 must be the Industry Code of '{0}'", _ValidIndustryCode);
        return false;
      }
      if (IndustryCode != _ValidIndustryCode)
      {
        _ValidatationErrorMessage = String.Format("The charaters 1-2 must be the Industry Code of '{0}'", _ValidIndustryCode);
        return false;
      }
      if (String.IsNullOrWhiteSpace(CountryCode))
      {
        _ValidatationErrorMessage = String.Format("The charaters 3-5 must be the Country Code of '{0}'", _ValidCountryCode);
        return false;
      }
      if (CountryCode != _ValidCountryCode)
      {
        _ValidatationErrorMessage = String.Format("The charaters 3-5 must be the Country Code of '{0}'", _ValidCountryCode);
        return false;
      }
      if (String.IsNullOrWhiteSpace(NumberIssuerCode))
      {
        _ValidatationErrorMessage = String.Format("The charaters 6-6 must be a Number Issuer Code of '0, 1 or 2' indicating a IHI, HPI-I or HPI-O ");
        return false;
      }
      if (type == HealthcareIdentifierType.None)
      {
        _ValidatationErrorMessage = String.Format("The charaters 6-6 must be a Number Issuer Code of '0, 1 or 2' indicating a IHI, HPI-I or HPI-O ");
        return false;
      }
      if (type != HealthcareIdentifierType.None)
      {
        if (type != this.HealthcareIdentifierType)
        {
          _ValidatationErrorMessage = String.Format("The charaters 6-6 must be a Number Issuer Code of '{0}' indicating the Healthcare Identifier Type of '{1}'", GetNumberIssuerCodeForHealthcareIdentifierType(this.HealthcareIdentifierType), this.HealthcareIdentifierType.ToString());
          return false;
        }
      }
      if (String.IsNullOrWhiteSpace(CheckDigit))
      {
        _ValidatationErrorMessage = String.Format("The charaters 16-16 must a single numeric check digit.");
        return false;
      }
      if (RawValue.Length != 16)
      {
        _ValidatationErrorMessage = String.Format("The Healthcare Identifier must be exactly 16 digits long.");
        return false;
      }
      if (!Support.StringSupport.IsDigitsOnly(this.Value))
      {
        _ValidatationErrorMessage = String.Format("The Healthcare Identifier must be only contain numeric digits [0-9].");
        return false;
      }
      if (!IsValidCheckDigit())
      {
        _ValidatationErrorMessage = String.Format("The Healthcare Identifier's check digit fails validation by the Luhn Algorithm.");
        return false;
      }
      _ValidatationErrorMessage = "The Healthcare Identifier is Valid.";
      return true;
    }


    #endregion
  }

}

